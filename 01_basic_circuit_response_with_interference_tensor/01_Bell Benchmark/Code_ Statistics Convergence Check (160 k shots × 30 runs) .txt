# ===== Statistics Convergence Check (160 k shots × 30 runs) =====

from math import pi
import numpy as np, time
from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator

SHOTS  = 160_000
REPEAT = 30
sim    = AerSimulator()

A0, A1 = 0, pi / 2
B0, B1 = pi / 4, -pi / 4

def exp_zz(cnt):
    pos = cnt.get('00', 0) + cnt.get('11', 0)
    neg = cnt.get('01', 0) + cnt.get('10', 0)
    return (pos - neg) / (pos + neg)

def chsh_one():
    def counts(th_a, th_b):
        qc = QuantumCircuit(2)
        qc.h(0); qc.cx(0, 1)
        qc.ry(th_a, 0); qc.ry(th_b, 1); qc.measure_all()
        tqc = transpile(qc, sim)
        return sim.run(tqc, shots=SHOTS // 4).result().get_counts()
    e00 = exp_zz(counts(A0, B0))
    e01 = exp_zz(counts(A0, B1))
    e10 = exp_zz(counts(A1, B0))
    e11 = exp_zz(counts(A1, B1))
    return e00 + e01 + e10 - e11

vals  = [chsh_one() for _ in range(REPEAT)]
mean  = np.mean(vals); std = np.std(vals, ddof=1)
print(f"mean CHSH = {mean:.8f}")
print(f"sample σ  = {std:.5f}")
print(f"z = {(mean - 2.82842712) / (std / np.sqrt(REPEAT)):.2f}")
