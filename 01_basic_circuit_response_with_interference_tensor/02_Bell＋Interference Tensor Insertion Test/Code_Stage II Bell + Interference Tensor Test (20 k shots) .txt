# ===== Stage II: Bell + Interference Tensor Test (20 k shots) =====
!pip -q install "qiskit~=0.45" "qiskit-aer~=0.13"

import numpy as np
from math import pi
from qiskit import QuantumCircuit
from qiskit_aer import AerSimulator
from qiskit.quantum_info import Operator, Statevector, Pauli

# ---------- Measurement axes ----------
A0, A1 = 0, pi / 2
B0, B1 = pi / 4, -pi / 4

# ---------- Interference Tensor definition ----------
def I_tensor():
    """
    Return a 4Ã—4 unitary matrix (numpy.ndarray).
    Example: the identity is np.eye(4).  
    Readers may replace this arbitrarily for their own tests.
    """
    return np.eye(4)

ITOP = Operator(I_tensor())
sim  = AerSimulator(method="statevector")

def corr(th_a, th_b, use_tensor=False):
    qc = QuantumCircuit(2)
    qc.h(0); qc.cx(0, 1)
    if use_tensor:
        qc.append(ITOP, [0, 1])
    qc.ry(th_a, 0); qc.ry(th_b, 1)
    sv = Statevector(qc)
    return sv.expectation_value(Pauli('ZZ')).real

def CHSH(use_tensor=False):
    return (corr(A0, B0, use_tensor) + corr(A0, B1, use_tensor)
          + corr(A1, B0, use_tensor) - corr(A1, B1, use_tensor))

baseline = CHSH(False)
tensor   = CHSH(True)

print(f"baseline CHSH = {baseline:.8f}")
print(f"tensor   CHSH = {tensor:.8f}")
# =============================================================
